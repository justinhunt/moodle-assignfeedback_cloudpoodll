{"version":3,"file":"fetchsubmission.min.js","sources":["../src/fetchsubmission.js"],"sourcesContent":["define(['jquery', 'core/log','core/str','core/ajax','core/notification','core/modal_factory', 'core/modal_events'],\n    function ($, log, str, Ajax, notification, ModalFactory, ModalEvents) {\n    \"use strict\"; // jshint ;_;\n    /*\n    This file does small report\n     */\n\n    log.debug('Fetch Submission: initialising');\n\n    return {\n        //controls\n        controls: {},\n        overwrite: 'OVERWRITE',\n        overwritefetchedsubmission: 'Overwrite the submitted text?',\n        overwritewarning: 'WARNING: Overwrite',\n\n        //init the module\n        init: function () {\n            this.register_controls();\n            this.init_strings();\n            this.register_events();\n        },\n\n        init_strings: function(){\n            var that =this;\n            str.get_string('overwrite','assignfeedback_cloudpoodll').done(function(s){that.overwrite=s;});\n            str.get_string('overwritefetchedsubmission','assignfeedback_cloudpoodll').done(function(s){that.overwritefetchedsubmission=s;});\n            str.get_string('overwritewarning','assignfeedback_cloudpoodll').done(function(s){that.overwritewarning=s;});\n\n        },\n\n        //load all the controls so we do not have to do it later\n        register_controls: function () {\n            this.controls.fetchsubmissionbutton = $('.fetchsubmissiontrigger');\n        },\n\n        //attach the various event handlers we need\n        register_events: function () {\n            var that = this;\n            that.controls.fetchsubmissionbutton.click(function(e){\n                //collect target element from  data-target\n                var targetselector  = $(this).data('target');\n\n                //if we already have grammar suggestions, we need to ask if we should overwrite\n                if($(targetselector).val().length>0) {\n                    ModalFactory.create({\n                        type: ModalFactory.types.SAVE_CANCEL,\n                        title: that.overwritewarning,\n                        body: that.overwritefetchedsubmission,\n                    })\n                        .then(function (themodal) {\n                            themodal.setSaveButtonText(that.overwrite);\n                            var root = themodal.getRoot();\n                            root.on(ModalEvents.save,\n                                function (e) {\n                                    that.do_fetch(targetselector);\n                                }\n                            );\n                            themodal.show();\n                            return themodal;\n                        });\n                }else {\n                    //if not we just fetch grammar suggestions\n                    that.do_fetch(targetselector);\n                }\n                return false;\n            });\n        },//end of register events\n\n        do_fetch: function(targetselector){\n            //fetch submitted text first from cloud poodll\n            var submittedtext ='';\n            var cp_transcript = $('.assignsubmission_cloudpoodll_transcript-text');\n            if (cp_transcript.length > 0) {\n                submittedtext=cp_transcript.text();\n            }else{\n                //if no cloud poodll lets try online text\n                var ot_summary = $('.assignsubmission_onlinetext .plugincontentsummary');\n                if(ot_summary.length > 0){\n                    //ok we have an online text, but we have to work quite hard to get the text\n                    var lastclass = ot_summary.attr('class').split(' ').pop();\n                    var fulltextclass = lastclass.replace('summary', 'full');\n                    var ot_transcript=$('.' + fulltextclass);\n                    if(ot_transcript.length > 0){\n                        submittedtext=ot_transcript.text();\n                    }\n                }\n            }\n            if (submittedtext !== '') {\n                $(targetselector).val(submittedtext);\n            }\n        }\n    };\n\n});"],"names":["define","$","log","str","Ajax","notification","ModalFactory","ModalEvents","debug","controls","overwrite","overwritefetchedsubmission","overwritewarning","init","register_controls","init_strings","register_events","that","this","get_string","done","s","fetchsubmissionbutton","click","e","targetselector","data","val","length","create","type","types","SAVE_CANCEL","title","body","then","themodal","setSaveButtonText","getRoot","on","save","do_fetch","show","submittedtext","cp_transcript","text","ot_summary","fulltextclass","attr","split","pop","replace","ot_transcript"],"mappings":"AAAAA,oDAAO,CAAC,SAAU,WAAW,WAAW,YAAY,oBAAoB,qBAAsB,sBAC1F,SAAUC,EAAGC,IAAKC,IAAKC,KAAMC,aAAcC,aAAcC,oBAMzDL,IAAIM,MAAM,kCAEH,CAEHC,SAAU,GACVC,UAAW,YACXC,2BAA4B,gCAC5BC,iBAAkB,qBAGlBC,KAAM,gBACGC,yBACAC,oBACAC,mBAGTD,aAAc,eACNE,KAAMC,KACVf,IAAIgB,WAAW,YAAY,8BAA8BC,MAAK,SAASC,GAAGJ,KAAKP,UAAUW,KACzFlB,IAAIgB,WAAW,6BAA6B,8BAA8BC,MAAK,SAASC,GAAGJ,KAAKN,2BAA2BU,KAC3HlB,IAAIgB,WAAW,mBAAmB,8BAA8BC,MAAK,SAASC,GAAGJ,KAAKL,iBAAiBS,MAK3GP,kBAAmB,gBACVL,SAASa,sBAAwBrB,EAAE,4BAI5Ce,gBAAiB,eACTC,KAAOC,KACXD,KAAKR,SAASa,sBAAsBC,OAAM,SAASC,OAE3CC,eAAkBxB,EAAEiB,MAAMQ,KAAK,iBAGhCzB,EAAEwB,gBAAgBE,MAAMC,OAAO,EAC9BtB,aAAauB,OAAO,CAChBC,KAAMxB,aAAayB,MAAMC,YACzBC,MAAOhB,KAAKL,iBACZsB,KAAMjB,KAAKN,6BAEVwB,MAAK,SAAUC,iBACZA,SAASC,kBAAkBpB,KAAKP,WACrB0B,SAASE,UACfC,GAAGhC,YAAYiC,MAChB,SAAUhB,GACNP,KAAKwB,SAAShB,mBAGtBW,SAASM,OACFN,YAIfnB,KAAKwB,SAAShB,iBAEX,MAIfgB,SAAU,SAAShB,oBAEXkB,cAAe,GACfC,cAAgB3C,EAAE,oDAClB2C,cAAchB,OAAS,EACvBe,cAAcC,cAAcC,WAC3B,KAEGC,WAAa7C,EAAE,yDAChB6C,WAAWlB,OAAS,EAAE,KAGjBmB,cADYD,WAAWE,KAAK,SAASC,MAAM,KAAKC,MACtBC,QAAQ,UAAW,QAC7CC,cAAcnD,EAAE,IAAM8C,eACvBK,cAAcxB,OAAS,IACtBe,cAAcS,cAAcP,SAIlB,KAAlBF,eACA1C,EAAEwB,gBAAgBE,IAAIgB"}