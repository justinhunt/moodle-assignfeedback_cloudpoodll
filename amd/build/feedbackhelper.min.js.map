{"version":3,"file":"feedbackhelper.min.js","sources":["../src/feedbackhelper.js"],"sourcesContent":["import $ from 'jquery';\nimport log from 'core/log';\nimport cloudpoodll from './cloudpoodllloader';\nimport * as str from 'core/str';\n\nlog.debug('cloudpoodll feedback helper: initialising');\n\nconst instancemap = {};\nlet registeredtoggler = false;\n\nexport default class feedbackHandler {\n\n    uploadstate = false;\n    togglestate = 0;\n    strings = {};\n    controls = {};\n\n    constructor(opts) {\n        this.component = opts['component'];\n        this.subtype = opts['subtype'] || '';\n\n        this.register_controls();\n        this.register_events();\n        this.setup_recorder();\n    }\n\n    static init(opts) {\n        return new feedbackHandler(opts);\n    }\n\n    static registerToggler() {\n        if (registeredtoggler) {\n            return;\n        }\n        registeredtoggler = true;\n        document.addEventListener('click', e => {\n            const toggleinput = e.target.closest('[data-action=\"toggle\"]');\n            if (toggleinput) {\n                try {\n                    const togglecontainer = document.querySelector(toggleinput.dataset.target);\n                    if (togglecontainer) {\n                        const labelElement = toggleinput.closest('label.togglerecorder');\n                        const $togglecontainer = $(togglecontainer);\n                        if (toggleinput.checked) {\n                            $togglecontainer.collapse('show');\n                            labelElement.classList.add('enabledstate');\n                        } else {\n                            $togglecontainer.collapse('hide');\n                            labelElement.classList.remove('enabledstate');\n                        }\n                    }\n                } catch (e) {\n                    //do nothing\n                    log.debug(e);\n                }\n            }\n        });\n    }\n\n    setup_recorder() {\n        const recorderid = this.component + this.subtype + '_therecorder';\n        instancemap[recorderid] = Object.assign({}, this);\n        const recorder_callback = evt => {\n            if (instancemap.hasOwnProperty(evt.id)) {\n                const instance = instancemap[evt.id];\n                switch (evt.type) {\n                    case 'recording':\n                        if (evt.action === 'started') {\n                            instance.controls.updatecontrol.val();\n                        }\n                        break;\n                    case 'awaitingprocessing':\n                        if (instance.uploadstate != 'posted') {\n                            instance.controls.updatecontrol.val(evt.mediaurl);\n                        }\n                        instance.uploadstate = 'posted';\n                        break;\n                    case 'error':\n                        alert('PROBLEM:' + evt.message);\n                        break;\n                }\n            }\n        };\n        this.uploadstate = false;\n        cloudpoodll.init(recorderid, recorder_callback);\n    }\n\n    register_controls() {\n        this.controls.deletebutton = $('.' + this.component + this.subtype + '_deletefeedbackbutton');\n        this.controls.updatecontrol = $('#' + this.component + this.subtype + '_updatecontrol');\n        this.controls.currentcontainer = $('.' + this.component + this.subtype + '_currentfeedback');\n        this.controls.togglecontainer = $('.' + this.component + this.subtype + '_togglecontainer');\n        this.controls.togglebutton = $('.' + this.component + this.subtype + '_togglecontainer .togglebutton');\n        this.controls.toggletext = $('.' + this.component + this.subtype + '_togglecontainer .toggletext');\n        str.get_string('clicktohide', this.component).done(s => {\n            this.strings['clicktohide'] = s;\n        });\n        str.get_string('clicktoshow', this.component).done(s => {\n            this.strings['clicktoshow'] = s;\n        });\n    }\n\n    register_events() {\n        this.controls.deletebutton.click(() => {\n            if (this.controls.updatecontrol) {\n                if (confirm(M.util.get_string('reallydeletefeedback', this.component))) {\n                    this.controls.updatecontrol.val(-1);\n                    this.controls.currentcontainer.html('');\n                }\n            }\n        });\n        this.controls.togglebutton.click(this.toggle_currentfeedback.bind(this));\n        this.controls.toggletext.click(this.toggle_currentfeedback.bind(this));\n    }\n\n    toggle_currentfeedback() {\n        const doToggleState = () => {\n            if (this.togglestate == 0) {\n                this.controls.togglebutton.removeClass('fa-toggle-off');\n                this.controls.togglebutton.addClass('fa-toggle-on');\n                this.controls.toggletext.text(this.strings['clicktohide']);\n                this.togglestate = 1;\n            } else {\n                this.controls.togglebutton.removeClass('fa-toggle-on');\n                this.controls.togglebutton.addClass('fa-toggle-off');\n                this.controls.toggletext.text(this.strings['clicktoshow']);\n                this.togglestate = 0;\n            }\n        };\n        this.controls.currentcontainer.toggle(\n            {duration: 300, complete: doToggleState}\n        );\n        return false;\n    }\n}// end of return object."],"names":["debug","instancemap","registeredtoggler","feedbackHandler","constructor","opts","component","subtype","register_controls","register_events","setup_recorder","document","addEventListener","e","toggleinput","target","closest","togglecontainer","querySelector","dataset","labelElement","$togglecontainer","checked","collapse","classList","add","remove","recorderid","this","Object","assign","uploadstate","init","evt","hasOwnProperty","id","instance","type","action","controls","updatecontrol","val","mediaurl","alert","message","deletebutton","currentcontainer","togglebutton","toggletext","str","get_string","done","s","strings","click","confirm","M","util","html","toggle_currentfeedback","bind","toggle","duration","complete","togglestate","removeClass","addClass","text"],"mappings":"gjDAKIA,MAAM,mDAEJC,YAAc,OAChBC,mBAAoB,QAEHC,gBAOjBC,YAAYC,0CALE,sCACA,kCACJ,oCACC,SAGFC,UAAYD,KAAI,eAChBE,QAAUF,KAAI,SAAe,QAE7BG,yBACAC,uBACAC,6BAGGL,aACD,IAAIF,gBAAgBE,+BAIvBH,oBAGJA,mBAAoB,EACpBS,SAASC,iBAAiB,SAASC,UACzBC,YAAcD,EAAEE,OAAOC,QAAQ,6BACjCF,sBAEUG,gBAAkBN,SAASO,cAAcJ,YAAYK,QAAQJ,WAC/DE,gBAAiB,OACXG,aAAeN,YAAYE,QAAQ,wBACnCK,kBAAmB,mBAAEJ,iBACvBH,YAAYQ,SACZD,iBAAiBE,SAAS,QAC1BH,aAAaI,UAAUC,IAAI,kBAE3BJ,iBAAiBE,SAAS,QAC1BH,aAAaI,UAAUE,OAAO,kBAGxC,MAAOb,gBAEDb,MAAMa,QAM1BH,uBACUiB,WAAaC,KAAKtB,UAAYsB,KAAKrB,QAAU,eACnDN,YAAY0B,YAAcE,OAAOC,OAAO,GAAIF,WAsBvCG,aAAc,6BACPC,KAAKL,YAtBSM,SAClBhC,YAAYiC,eAAeD,IAAIE,IAAK,OAC9BC,SAAWnC,YAAYgC,IAAIE,WACzBF,IAAII,UACH,YACkB,YAAfJ,IAAIK,QACJF,SAASG,SAASC,cAAcC,gBAGnC,qBAC2B,UAAxBL,SAASL,aACTK,SAASG,SAASC,cAAcC,IAAIR,IAAIS,UAE5CN,SAASL,YAAc,mBAEtB,QACDY,MAAM,WAAaV,IAAIW,cAS3CpC,yBACS+B,SAASM,cAAe,mBAAE,IAAMjB,KAAKtB,UAAYsB,KAAKrB,QAAU,8BAChEgC,SAASC,eAAgB,mBAAE,IAAMZ,KAAKtB,UAAYsB,KAAKrB,QAAU,uBACjEgC,SAASO,kBAAmB,mBAAE,IAAMlB,KAAKtB,UAAYsB,KAAKrB,QAAU,yBACpEgC,SAAStB,iBAAkB,mBAAE,IAAMW,KAAKtB,UAAYsB,KAAKrB,QAAU,yBACnEgC,SAASQ,cAAe,mBAAE,IAAMnB,KAAKtB,UAAYsB,KAAKrB,QAAU,uCAChEgC,SAASS,YAAa,mBAAE,IAAMpB,KAAKtB,UAAYsB,KAAKrB,QAAU,gCACnE0C,IAAIC,WAAW,cAAetB,KAAKtB,WAAW6C,MAAKC,SAC1CC,QAAL,YAA8BD,KAElCH,IAAIC,WAAW,cAAetB,KAAKtB,WAAW6C,MAAKC,SAC1CC,QAAL,YAA8BD,KAItC3C,uBACS8B,SAASM,aAAaS,OAAM,KACzB1B,KAAKW,SAASC,eACVe,QAAQC,EAAEC,KAAKP,WAAW,uBAAwBtB,KAAKtB,mBAClDiC,SAASC,cAAcC,KAAK,QAC5BF,SAASO,iBAAiBY,KAAK,aAI3CnB,SAASQ,aAAaO,MAAM1B,KAAK+B,uBAAuBC,KAAKhC,YAC7DW,SAASS,WAAWM,MAAM1B,KAAK+B,uBAAuBC,KAAKhC,OAGpE+B,qCAcSpB,SAASO,iBAAiBe,OAC3B,CAACC,SAAU,IAAKC,SAdE,KACM,GAApBnC,KAAKoC,kBACAzB,SAASQ,aAAakB,YAAY,sBAClC1B,SAASQ,aAAamB,SAAS,qBAC/B3B,SAASS,WAAWmB,KAAKvC,KAAKyB,QAAL,kBACzBW,YAAc,SAEdzB,SAASQ,aAAakB,YAAY,qBAClC1B,SAASQ,aAAamB,SAAS,sBAC/B3B,SAASS,WAAWmB,KAAKvC,KAAKyB,QAAL,kBACzBW,YAAc,OAMpB"}