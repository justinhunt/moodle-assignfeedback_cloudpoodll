{"version":3,"file":"previewcorrections.min.js","sources":["../src/previewcorrections.js"],"sourcesContent":["define(['jquery', 'core/log','core/str','core/ajax','core/notification','assignfeedback_cloudpoodll/correctionsmarkup'],\n    function ($, log, str, Ajax, notification,correctionsmarkup) {\n    \"use strict\"; // jshint ;_;\n    /*\n    This file does small report\n     */\n\n    log.debug('Preview corrections: initialising');\n\n    return {\n        //controls\n        controls: {},\n        previewtimer: null,\n\n        //init the module\n        init: function(){\n            this.init_strings();\n            this.register_controls();\n            this.register_events();\n            //on first load do render. If we have are loading an existing feedback we should preview the correctons\n            this.render_and_markup();\n        },\n\n        init_strings: function(){\n          var that =this;\n          //str.get_string('checking','assignfeedback_cloudpoodll').done(function(s){that.checking=s;});\n        },\n\n        //load all the controls so we do not have to do it later\n        register_controls: function(){\n            this.controls.textareas = $('#id_submittedtext, #id_correctedtext');\n            this.controls.submittedtextarea = $('#id_submittedtext');\n            this.controls.correctionstextarea = $('#id_correctedtext');\n            this.controls.correctionscontainer = $('.asf_cp_corrections_cont');\n            this.controls.previewcontainer = $('.asf_cp_correctionspreview_cont');\n            this.controls.animcontainer = $('#asf_cp_correctionspreview_anim');\n        },\n\n        //attach the various event handlers we need\n        register_events: function() {\n            var that = this;\n\n            //if either text area changes start the timer to do a preview\n            that.controls.textareas.on('input', function() {\n                clearTimeout(that.previewtimer);   // clear the timer whenever the input is changed\n                that.previewtimer = setTimeout(function(\n                ) {  // after 2.5s, log something to the console\n                    that.render_and_markup();\n                }, 2500);\n            });\n\n        },//end of register events\n\n\n\n        render_and_markup: function () {\n            var that = this;\n            var thepassage = that.controls.submittedtextarea.val();\n            var thecorrections = that.controls.correctionstextarea.val();\n            //if no passage or corrections do nothing\n            if(thepassage.length<1 || thecorrections.length<1){\n                return;\n            }\n\n            //show the spinner animation\n            that.controls.animcontainer.show();\n\n            Ajax.call([{\n                methodname: 'assignfeedback_cloudpoodll_render_diffs',\n                args: {\n                    passage: thepassage,\n                    corrections: thecorrections,\n                },\n                done: function (ajaxresult) {\n                    that.controls.animcontainer.hide(); //hide the spinner\n                    var payloadobject = JSON.parse(ajaxresult);\n                    if (payloadobject) {\n                        if(payloadobject.markedupsuggestions.length>3){\n                            that.controls.correctionscontainer.html(payloadobject.markedupsuggestions);\n                            correctionsmarkup.justmarkup( that.controls.correctionscontainer,\n                                payloadobject.grammarerrors,\n                                payloadobject.grammarmatches,\n                                payloadobject.insertioncount);\n                            //initially the preview container is hidden\n                            that.controls.previewcontainer.show();\n                        }\n                    }else{\n                        //something went wrong, user does not really need to know details\n                        log.debug('result not fetched');\n                    }\n\n                },\n                fail: notification.exception\n            }]);\n        },\n\n    };//end of return value\n});"],"names":["define","$","log","str","Ajax","notification","correctionsmarkup","debug","controls","previewtimer","init","init_strings","register_controls","register_events","render_and_markup","textareas","submittedtextarea","correctionstextarea","correctionscontainer","previewcontainer","animcontainer","that","this","on","clearTimeout","setTimeout","thepassage","val","thecorrections","length","show","call","methodname","args","passage","corrections","done","ajaxresult","hide","payloadobject","JSON","parse","markedupsuggestions","html","justmarkup","grammarerrors","grammarmatches","insertioncount","fail","exception"],"mappings":"AAAAA,uDAAO,CAAC,SAAU,WAAW,WAAW,YAAY,oBAAoB,iDACpE,SAAUC,EAAGC,IAAKC,IAAKC,KAAMC,aAAaC,0BAM1CJ,IAAIK,MAAM,qCAEH,CAEHC,SAAU,GACVC,aAAc,KAGdC,KAAM,gBACGC,oBACAC,yBACAC,uBAEAC,qBAGTH,aAAc,aAMdC,kBAAmB,gBACVJ,SAASO,UAAYd,EAAE,6CACvBO,SAASQ,kBAAoBf,EAAE,0BAC/BO,SAASS,oBAAsBhB,EAAE,0BACjCO,SAASU,qBAAuBjB,EAAE,iCAClCO,SAASW,iBAAmBlB,EAAE,wCAC9BO,SAASY,cAAgBnB,EAAE,oCAIpCY,gBAAiB,eACTQ,KAAOC,KAGXD,KAAKb,SAASO,UAAUQ,GAAG,SAAS,WAChCC,aAAaH,KAAKZ,cAClBY,KAAKZ,aAAegB,YAAW,WAE3BJ,KAAKP,sBACN,UAOXA,kBAAmB,eACXO,KAAOC,KACPI,WAAaL,KAAKb,SAASQ,kBAAkBW,MAC7CC,eAAiBP,KAAKb,SAASS,oBAAoBU,MAEpDD,WAAWG,OAAO,GAAKD,eAAeC,OAAO,IAKhDR,KAAKb,SAASY,cAAcU,OAE5B1B,KAAK2B,KAAK,CAAC,CACPC,WAAY,0CACZC,KAAM,CACFC,QAASR,WACTS,YAAaP,gBAEjBQ,KAAM,SAAUC,YACZhB,KAAKb,SAASY,cAAckB,WACxBC,cAAgBC,KAAKC,MAAMJ,YAC3BE,cACGA,cAAcG,oBAAoBb,OAAO,IACxCR,KAAKb,SAASU,qBAAqByB,KAAKJ,cAAcG,qBACtDpC,kBAAkBsC,WAAYvB,KAAKb,SAASU,qBACxCqB,cAAcM,cACdN,cAAcO,eACdP,cAAcQ,gBAElB1B,KAAKb,SAASW,iBAAiBW,QAInC5B,IAAIK,MAAM,uBAIlByC,KAAM3C,aAAa4C"}