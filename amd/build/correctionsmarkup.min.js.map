{"version":3,"file":"correctionsmarkup.min.js","sources":["../src/correctionsmarkup.js"],"sourcesContent":["define(['jquery', 'core/log'], function ($, log) {\n    \"use strict\"; // jshint ;_;\n\n    log.debug('Corrections Markup: initialising');\n\n    return {\n        //controls\n\n        controls: {},\n\n        //class definitions\n        cd: {\n            correctionscontainer: 'asf_cp_corrections_cont',\n            insertclass: 'asf_cp_finediffinsertion',\n            passagewordclass: 'asf_cp_grading_passageword',\n            passagespaceclass: 'asf_cp_grading_passagespace',\n            //previously removed\n            wordclass: 'asf_cp_grading_correctionsword',\n            spaceclass: 'asf_cp_grading_correctionsspace',\n            suggestionclass: 'asf_cp_corrections_suggestedword',\n            insertionclass: 'asf_cp_corrections_insertionword',\n            wordomittedclass: 'asf_cp_corrections_omittedword',\n            aiunmatched: 'asf_cp_aiunmatched',\n            aicorrected: 'asf_cp_aicorrected',\n            aiomitted: 'asf_cp_aiomitted',\n            aiinserted: 'asf_cp_aiinserted',\n            aisuggested: 'asf_cp_aisuggested',\n        },\n\n        options: {\n            errorwords: {},\n            grammarmatches: {},\n            suggestedwords: {},\n            insertioncount: 0\n        },\n\n        justmarkup: function (correctionsdiv, sessionerrors,sessionmatches,insertioncount) {\n            //register the controls\n            this.controls.correctionscontainer = $(correctionsdiv);\n            //set the options\n            this.options.suggestedwords = JSON.parse(sessionerrors);\n            this.options.grammarmatches = JSON.parse(sessionmatches);\n            this.options.insertioncount = insertioncount;\n            //do the markup\n            this.markup_suggestedwords();\n            this.markup_unmatchedwords();\n\n        },\n\n        init: function (config) {\n\n            //pick up opts from html (if any) and set them\n            var theid = '#' + config['id'];\n            var configcontrol = $(theid).get(0);\n            if (configcontrol) {\n                var opts = JSON.parse(configcontrol.value);\n                $(theid).remove();\n\n\n                if (opts['sessionerrors'] !== '') {\n                    this.options.suggestedwords = JSON.parse(opts['sessionerrors']);\n                } else {\n                    this.options.suggestedwords = {};\n                }\n                if (opts['sessionmatches'] !== '') {\n                    this.options.grammarmatches = JSON.parse(opts['sessionmatches']);\n                } else {\n                    this.options.grammarmatches  = {};\n                }\n\n                if (opts['insertioncount'] !== '') {\n                    this.options.insertioncount = opts['insertioncount'];\n                }else{\n                    this.options.insertioncount = 0;\n                }\n\n            } else if(config.hasOwnProperty('sessionerrors') &&\n                config.hasOwnProperty('sessionmatches') &&\n                config.hasOwnProperty('insertioncount')){\n\n                this.options.suggestedwords = JSON.parse(config['sessionerrors']);\n                this.options.grammarmatches = JSON.parse(config['sessionmatches']);\n                this.options.insertioncount = config['insertioncount'];\n\n            } else {\n                //if there is no config we might as well give up\n                return;\n            }\n\n            //register the controls\n            this.register_controls();\n\n            //markup suggested words\n            this.markup_suggestedwords();\n\n            //mark up unmatched words\n            this.markup_unmatchedwords();\n\n            //register events\n            this.register_events();\n\n        },\n\n\n        register_controls: function () {\n\n            this.controls.correctionscontainer = $(\".\" + this.cd.correctionscontainer);\n\n        },\n\n        register_events: function () {\n            var that = this;\n            //set up event handlers\n            this.controls.correctionscontainer.on('click','.' + this.cd.wordclass + ',.' + this.cd.spaceclass, function () {\n                var tpositions = $(this).attr('data-tpositions');\n                if (typeof tpositions === 'undefined' || tpositions === '') {\n                    return;\n                }\n\n                var correctiontype = '';//defaults to none .. its just highlighting\n                //any correction will be a suggestion but it might also be an insertion or an omission which overrides suggestion\n                if($(this).hasClass(that.cd.suggestionclass)){correctiontype='suggestion';}\n                if($(this).hasClass(that.cd.insertionclass)){correctiontype='insertion';}\n                if($(this).hasClass(that.cd.wordomittedclass)){correctiontype='omission';}\n\n                //perform highlighting\n                that.highlightoriginal(tpositions,correctiontype);\n                setTimeout(function () {\n                    that.dehighlightoriginal(tpositions);\n                }, 1000);\n            });\n\n            // Use mouseover event for highlighting\n            this.controls.correctionscontainer.on('mouseover', '.' + this.cd.wordclass + ',.' + this.cd.spaceclass,  function () {\n                //if there is no transcript positions then we cannot highlight, so just return\n                var tpositions = $(this).attr('data-tpositions');\n                if (typeof tpositions === 'undefined' || tpositions === '') {return;}\n\n                var correctiontype = '';//defaults to none .. its just highlighting and not corrected\n                //any correction will be a suggestion but it might also be an insertion or an omission which overrides suggestion\n                if($(this).hasClass(that.cd.suggestionclass)){correctiontype='suggestion';}\n                if($(this).hasClass(that.cd.insertionclass)){correctiontype='insertion';}\n                if($(this).hasClass(that.cd.wordomittedclass)){correctiontype='omission';}\n                //perform highlighting\n                that.highlightoriginal(tpositions,correctiontype);\n            });\n\n            // Use mouseout event for de-highlighting\n            this.controls.correctionscontainer.on('mouseout','.' + this.cd.wordclass + ',.' + this.cd.spaceclass,  function () {\n                var tpositions = $(this).attr('data-tpositions');\n                if (typeof tpositions === 'undefined' || tpositions === '') {return;}\n                that.dehighlightoriginal(tpositions);\n            });\n        },\n\n        highlightoriginal: function (tpositionstring,correctiontype) {\n            var that = this;\n            var tpositions = tpositionstring.split(',');\n            var correctionsclasses = [];\n            correctionsclasses.push(that.cd.aicorrected);\n            if(correctiontype==='insertion') {\n                correctionsclasses.push(that.cd.aiinserted);\n            }else if(correctiontype==='omission') {\n                correctionsclasses.push(that.cd.aiomitted);\n            }else if (correctiontype==='suggestion') {\n                correctionsclasses.push(that.cd.aisuggestion);\n            }\n\n\n            //$.each(tpositions, function (index, tposition) {\n            for (var i = 0; i < tpositions.length; i++) {\n                var tposition = tpositions[i];\n                if(correctiontype==='insertion') {\n                    //if the word is an insertion, then we only highlight spaces, because no word is altered in the original\n                    $('#' + that.cd.passagespaceclass + '_' + tposition).addClass(correctionsclasses);\n                } else {\n                    $('#' + that.cd.passagewordclass + '_' + tposition).addClass(correctionsclasses);\n                    //to highlight connecting spaces we check if we are between tpositions\n                    if(i < tpositions.length - 1) {\n                        $('#' + that.cd.passagespaceclass + '_' + tposition).addClass(correctionsclasses);\n                    }\n                }\n            }\n\n        },\n        dehighlightoriginal: function (tpositionstring) {\n            var that = this;\n            var correctionsclasses = [that.cd.aicorrected, that.cd.aiinserted, that.cd.aiomitted, that.cd.aisuggestion];\n            var tpositions = tpositionstring.split(',');\n            $.each(tpositions, function (index, tposition) {\n                $('#' + that.cd.passagewordclass + '_' + tposition).removeClass(correctionsclasses);\n                $('#' + that.cd.passagespaceclass + '_' + tposition).removeClass(correctionsclasses);\n            });\n        },\n\n        markup_suggestedwords: function () {\n            var m = this;\n            //this will give all the words up until the last match (passage/corrections\n            $.each(m.options.suggestedwords, function (index) {\n                    $('.' + m.cd.correctionscontainer + ' #' + m.cd.wordclass + '_' + (m.options.suggestedwords[index].wordnumber)).addClass(m.cd.suggestionclass);\n                }\n            );\n            //sadly the above code only takes us to the last match. NOT to the last suggestion\n            //so from the last match to the end of passage (if there are any words left) we mark those up too\n            //we use the insertion count to guess the transcript indexes of end words. This is used to highlight passage on mouseover in view summary\n           //m.options.grammarmatches is js object, so we can't use array functions on it.\n            if(Object.keys(m.options.grammarmatches).length > 0) {\n                var lastpposition=0;\n                var lasttposition=0;\n                $.each(m.options.grammarmatches, function (index, lastmatch) {\n                    lastpposition = Number(lastmatch.pposition);\n                    lasttposition = Number(lastmatch.tposition);\n                });\n                var lastwordnumber = Number(lastpposition);\n                var tpositions = [];\n                for(var i = lasttposition + 1; i <= lasttposition + m.options.insertioncount + 1; i++) {\n                    tpositions.push(i);\n                }\n                var allwords = $('.' + m.cd.correctionscontainer + ' .' + m.cd.wordclass);\n                allwords.filter(function() {\n                    var wordNumber = Number($(this).data('wordnumber'));\n                    return wordNumber > lastwordnumber && !$(this).hasClass(m.cd.suggestionclass);\n                }).addClass(m.cd.suggestionclass).attr('data-tpositions', tpositions.join(','));\n            }\n\n        },\n\n        //now we step through all the matched words, and look for \"gaps\"\n        //we marked up new/replaced words in \"markup_suggestedwords\", but missing words can't be marked up(they are not there)\n        //so we highlight the space where the missing word would have been\n        //NB process is .. we step through each word in the corrected text. Each word has a tposition and pposition\n        //NB tposition is the position in the original text.\n        //NB pposition is the position in the corrected text.\n        //NB if the tposition of the current word in the corrected text has jumped since the previous word, then we have a gap\n        // .. \"tposition\" and \"pposition\" are a misleading terms here ..sorry\n        markup_unmatchedwords: function () {\n            var that = this;\n            if (this.options.grammarmatches) {\n                //we need a dummy prevmatch for the first loop\n                var prevmatch = {tposition: 0, pposition: 0};\n                $.each(this.options.grammarmatches, function (index, match) {\n                    //if there is a gap since the previous word match in the tposition\n                    //AND if we didn't just add a suggestion (which will cause a transcript mismatch too) then\n                    // it's a missing word (ie in original but not in the corrected text)\n                    //we want to get the prior space and highlight it to show its missing\n                    //eg original \"one two three four five\" corrected to \"one two four five\"\n                    // we want to highlight the space between \"two\" and \"four\" since the t postion has jumped by 2\n                    if((match.tposition - prevmatch.tposition)>1) {\n                        var missingwordspacenumber = match.pposition - 1;\n                        if(missingwordspacenumber>0) {\n                            //if we have a missing word space number greater than 0 (should add a 0 space actually)\n                            //and it's not either side of a suggested word, then highlight\n                            if (!$('#' + that.cd.wordclass + '_' + match.pposition).hasClass(that.cd.suggestionclass)&&\n                                !$('#' + that.cd.wordclass + '_' + missingwordspacenumber).hasClass(that.cd.suggestionclass)) {\n                                $('#' + that.cd.spaceclass + '_' + missingwordspacenumber).addClass(that.cd.wordomittedclass);\n                            }\n                            //compile a list of tpositions that we have missed. So we can highlight them on \"tap\"\n                            var tpositions = [];\n                            for(var i = prevmatch.tposition + 1; i < match.tposition; i++) {\n                                tpositions.push(i);\n                            }\n                            //loop through the words and spaces that make up the gap and record the tpositions\n                            //if it's just a missing word(s) with no corrections, we simply mark up the space with the tpositions\n                            var p_gapcount = (match.pposition - prevmatch.pposition) -1;\n                            if(p_gapcount ===0) {\n                                $('#' + that.cd.spaceclass + '_' + missingwordspacenumber).attr('data-tpositions', tpositions.join(','));\n                            }else{\n                                for(var z = prevmatch.pposition + 1; z < match.pposition; z++) {\n                                    $('#' + that.cd.spaceclass + '_' + z).attr('data-tpositions', tpositions.join(','));\n                                    $('#' + that.cd.wordclass + '_' + z).attr('data-tpositions', tpositions.join(','));\n                                }\n                            }\n                        }\n                    }else if(match.pposition - prevmatch.pposition > 1) {\n                        //if there is a gap in the pposition, then we have an extra word in the corrected text\n                        //we want to highlight the space where the extra word would have been in the original text\n                        //eg original \"one two three four five\" corrected to \"one two twopointfive three four five\"\n                        // we want to highlight the space between \"two\" and \"three\" in original since the p position has jumped by more than one\n                        for (var insertedword = prevmatch.pposition + 1; insertedword < match.pposition; insertedword++) {\n                            $('#' + that.cd.wordclass + '_' + insertedword).addClass(that.cd.insertionclass);\n                            $('#' + that.cd.wordclass + '_' + insertedword).attr('data-tpositions', prevmatch.tposition);\n                        }\n                    }\n\n                    //Always mark up the current words tposition as well\n                    $('#' + that.cd.wordclass + '_' + match.pposition).attr('data-tpositions', match.tposition);\n                    //store this match as the new prevmatch so on the next loop pass we can compare\n                    prevmatch = match;\n                });//end of $ each loop\n            }\n\n        },\n    };\n});"],"names":["define","$","log","debug","controls","cd","correctionscontainer","insertclass","passagewordclass","passagespaceclass","wordclass","spaceclass","suggestionclass","insertionclass","wordomittedclass","aiunmatched","aicorrected","aiomitted","aiinserted","aisuggested","options","errorwords","grammarmatches","suggestedwords","insertioncount","justmarkup","correctionsdiv","sessionerrors","sessionmatches","JSON","parse","markup_suggestedwords","markup_unmatchedwords","init","config","theid","configcontrol","get","opts","value","remove","hasOwnProperty","register_controls","register_events","this","that","on","tpositions","attr","correctiontype","hasClass","highlightoriginal","setTimeout","dehighlightoriginal","tpositionstring","split","correctionsclasses","push","aisuggestion","i","length","tposition","addClass","each","index","removeClass","m","wordnumber","Object","keys","lastpposition","lasttposition","lastmatch","Number","pposition","lastwordnumber","filter","data","join","prevmatch","match","missingwordspacenumber","z","insertedword"],"mappings":"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"}