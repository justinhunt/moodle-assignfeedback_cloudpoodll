{"version":3,"file":"correctionsmarkup.min.js","sources":["../src/correctionsmarkup.js"],"sourcesContent":["define(['jquery', 'core/log'], function ($, log) {\n    \"use strict\"; // jshint ;_;\n\n    log.debug('Corrections Markup: initialising');\n\n    return {\n        //controls\n\n        controls: {},\n\n        //class definitions\n        cd: {\n            correctionscontainer: 'asf_cp_corrections_cont',\n            insertclass: 'asf_cp_finediffinsertion',\n            passagewordclass: 'asf_cp_grading_passageword',\n            //previously removed\n            wordclass: 'asf_cp_grading_correctionsword',\n            spaceclass: 'asf_cp_grading_correctionsspace',\n            suggestionclass: 'asf_cp_corrections_suggestedword',\n            wordomittedclass: 'asf_cp_corrections_omittedword',\n            aiunmatched: 'asf_cp_aiunmatched',\n            aicorrected: 'asf_cp_aicorrected'\n        },\n\n        options: {\n            errorwords: {},\n            grammarmatches: {},\n            suggestedwords: {},\n            insertioncount: 0\n        },\n\n        justmarkup: function (correctionsdiv, sessionerrors,sessionmatches,insertioncount) {\n            //register the controls\n            this.controls.correctionscontainer = $(correctionsdiv);\n            //set the options\n            this.options.suggestedwords = JSON.parse(sessionerrors);\n            this.options.grammarmatches = JSON.parse(sessionmatches);\n            this.options.insertioncount = insertioncount;\n            //do the markup\n            this.markup_suggestedwords();\n            this.markup_unmatchedwords();\n\n        },\n\n        init: function (config) {\n\n            //pick up opts from html (if any) and set them\n            var theid = '#' + config['id'];\n            var configcontrol = $(theid).get(0);\n            if (configcontrol) {\n                var opts = JSON.parse(configcontrol.value);\n                log.debug(opts);\n                $(theid).remove();\n\n\n                if (opts['sessionerrors'] !== '') {\n                    this.options.suggestedwords = JSON.parse(opts['sessionerrors']);\n                } else {\n                    this.options.suggestedwords = {};\n                }\n                if (opts['sessionmatches'] !== '') {\n                    this.options.grammarmatches = JSON.parse(opts['sessionmatches']);\n                } else {\n                    this.options.grammarmatches  = {};\n                }\n\n                if (opts['insertioncount'] !== '') {\n                    this.options.insertioncount = opts['insertioncount'];\n                }else{\n                    this.options.insertioncount = 0;\n                }\n\n            } else if(config.hasOwnProperty('sessionerrors') &&\n                config.hasOwnProperty('sessionmatches') &&\n                config.hasOwnProperty('insertioncount')){\n\n                this.options.suggestedwords = JSON.parse(config['sessionerrors']);\n                this.options.grammarmatches = JSON.parse(config['sessionmatches']);\n                this.options.insertioncount = config['insertioncount'];\n\n            } else {\n                //if there is no config we might as well give up\n                log.debug('Corrections Markup js: No config found on page. Giving up.');\n                return;\n            }\n\n            //register the controls\n            this.register_controls();\n\n            log.debug(this.options);\n\n            //markup suggested words\n            this.markup_suggestedwords();\n\n            //mark up unmatched words\n            this.markup_unmatchedwords();\n\n            //register events\n            this.register_events();\n\n        },\n\n\n        register_controls: function () {\n\n            this.controls.correctionscontainer = $(\".\" + this.cd.correctionscontainer);\n\n        },\n\n        register_events: function () {\n            var that = this;\n            //set up event handlers\n            this.controls.correctionscontainer.on('click','.' + this.cd.wordclass + ',.' + this.cd.spaceclass, function () {\n                var tpositions = $(this).attr('data-tpositions');\n                if (typeof tpositions === 'undefined' || tpositions === '') {return;}\n                that.highlightoriginal(tpositions);\n                setTimeout(function () {\n                    that.dehighlightoriginal(tpositions);\n                }, 1000);\n            });\n\n            // Use mouseover event for highlighting\n            this.controls.correctionscontainer.on('mouseover', '.' + this.cd.wordclass + ',.' + this.cd.spaceclass,  function () {\n                var tpositions = $(this).attr('data-tpositions');\n                if (typeof tpositions === 'undefined' || tpositions === '') {return;}\n                that.highlightoriginal(tpositions);\n            });\n\n            // Use mouseout event for de-highlighting\n            this.controls.correctionscontainer.on('mouseout','.' + this.cd.wordclass + ',.' + this.cd.spaceclass,  function () {\n                var tpositions = $(this).attr('data-tpositions');\n                if (typeof tpositions === 'undefined' || tpositions === '') {return;}\n                that.dehighlightoriginal(tpositions);\n            });\n        },\n\n        highlightoriginal: function (tpositionstring) {\n            var that = this;\n            var tpositions = tpositionstring.split(',');\n            $.each(tpositions, function (index, tposition) {\n                $('#' + that.cd.passagewordclass + '_' + tposition).addClass(that.cd.aicorrected);\n            });\n\n        },\n        dehighlightoriginal: function (tpositionstring) {\n            var that = this;\n            var tpositions = tpositionstring.split(',');\n            $.each(tpositions, function (index, tposition) {\n                $('#' + that.cd.passagewordclass + '_' + tposition).removeClass(that.cd.aicorrected);\n            });\n        },\n\n        markup_suggestedwords: function () {\n            var m = this;\n            //this will give all the words up until the last match (passage/corrections\n            $.each(m.options.suggestedwords, function (index) {\n                    $('.' + m.cd.correctionscontainer + ' #' + m.cd.wordclass + '_' + (m.options.suggestedwords[index].wordnumber)).addClass(m.cd.suggestionclass);\n                }\n            );\n            //sadly the above code only takes us to the last match. NOT to the last suggestion\n            //so from the last match to the end of passage (if there are any words left) we mark those up too\n            //we use the insertion count to guess the transcript indexes of end words. This is used to highlight passage on mouseover in view summary\n           //m.options.grammarmatches is js object, so we can't use array functions on it.\n            if(Object.keys(m.options.grammarmatches).length > 0) {\n                var lastpposition=0;\n                var lasttposition=0;\n                $.each(m.options.grammarmatches, function (index, lastmatch) {\n                    lastpposition = Number(lastmatch.pposition);\n                    lasttposition = Number(lastmatch.tposition);\n                });\n                var lastwordnumber = Number(lastpposition);\n                var tpositions = [];\n                for(var i = lasttposition + 1; i <= lasttposition + m.options.insertioncount + 1; i++) {\n                    tpositions.push(i);\n                }\n                var allwords = $('.' + m.cd.correctionscontainer + ' .' + m.cd.wordclass);\n                allwords.filter(function() {\n                    var wordNumber = Number($(this).data('wordnumber'));\n                    return wordNumber > lastwordnumber && !$(this).hasClass(m.cd.suggestionclass);\n                }).addClass(m.cd.suggestionclass).attr('data-tpositions', tpositions.join(','));\n            }\n\n        },\n\n        //now we step through all the matched words, and look for \"gaps\"\n        //we marked up new/replaced words in \"markup_suggestedwords\", but missing words can't be marked up(they are not there)\n        //so we highlight the space where the missing word would have been\n        //NB process is .. we step through each word in the corrected text. Each word has a tposition and pposition\n        //NB tposition is the position in the original text.\n        //NB pposition is the position in the corrected text.\n        //NB if the tposition of the current word in the corrected text has jumped since the previous word, then we have a gap\n        // .. \"tposition\" and \"pposition\" are a misleading terms here ..sorry\n        markup_unmatchedwords: function () {\n            var that = this;\n            if (this.options.grammarmatches) {\n                //we need a dummy prevmatch for the first loop\n                var prevmatch = {tposition: 0, pposition: 0};\n                $.each(this.options.grammarmatches, function (index, match) {\n                    //if there is a gap since the previous word match in the tposition\n                    //AND if we didn't just add a suggestion (which will cause a transcript mismatch too) then\n                    // it's a missing word (ie in original but not in the corrected text)\n                    //we want to get the prior space and highlight it to show its missing\n                    if((match.tposition - prevmatch.tposition)>1) {\n                        var missingwordspacenumber = match.pposition - 1;\n                        if(missingwordspacenumber>0) {\n                            //if we have a missing word space number greater than 0 (should add a 0 space actually)\n                            //and it's not either side of a suggested word, then highlight\n                            if (!$('#' + that.cd.wordclass + '_' + match.pposition).hasClass(that.cd.suggestionclass)&&\n                                !$('#' + that.cd.wordclass + '_' + missingwordspacenumber).hasClass(that.cd.suggestionclass)) {\n                                $('#' + that.cd.spaceclass + '_' + missingwordspacenumber).addClass(that.cd.wordomittedclass);\n                            }\n                            //compile a list of tpositions that we have missed. So we can highlight them on \"tap\"\n                            var tpositions = [];\n                            for(var i = prevmatch.tposition + 1; i < match.tposition; i++) {\n                                tpositions.push(i);\n                            }\n                            //loop through the words and spaces that make up the gap and record the tpositions\n                            //if it's just a missing word(s) with no corrections, we simply mark up the space with the tpositions\n                            var p_gapcount = (match.pposition - prevmatch.pposition) -1;\n                            if(p_gapcount ===0) {\n                                $('#' + that.cd.spaceclass + '_' + missingwordspacenumber).attr('data-tpositions', tpositions.join(','));\n                            }else{\n                                for(var z = prevmatch.pposition + 1; z < match.pposition; z++) {\n                                    $('#' + that.cd.spaceclass + '_' + z).attr('data-tpositions', tpositions.join(','));\n                                    $('#' + that.cd.wordclass + '_' + z).attr('data-tpositions', tpositions.join(','));\n                                }\n                            }\n                        }\n                    }\n                    //Always mark up the current words tposition as well\n                    $('#' + that.cd.wordclass + '_' + match.pposition).attr('data-tpositions', match.tposition);\n                    //store this match as the new prevmatch so on the next loop pass we can compare\n                    prevmatch = match;\n                });//end of $ each loop\n            }\n\n        },\n    };\n});"],"names":["define","$","log","debug","controls","cd","correctionscontainer","insertclass","passagewordclass","wordclass","spaceclass","suggestionclass","wordomittedclass","aiunmatched","aicorrected","options","errorwords","grammarmatches","suggestedwords","insertioncount","justmarkup","correctionsdiv","sessionerrors","sessionmatches","JSON","parse","markup_suggestedwords","markup_unmatchedwords","init","config","theid","configcontrol","get","opts","value","remove","hasOwnProperty","register_controls","this","register_events","that","on","tpositions","attr","highlightoriginal","setTimeout","dehighlightoriginal","tpositionstring","split","each","index","tposition","addClass","removeClass","m","wordnumber","Object","keys","length","lastpposition","lasttposition","lastmatch","Number","pposition","lastwordnumber","i","push","filter","data","hasClass","join","prevmatch","match","missingwordspacenumber","z"],"mappings":"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"}