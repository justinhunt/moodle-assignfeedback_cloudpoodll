{"version":3,"file":"grammarsuggestions.min.js","sources":["../src/grammarsuggestions.js"],"sourcesContent":["define(['jquery', 'core/log','core/str','core/ajax','core/notification','core/modal_factory', 'core/modal_events', 'assignfeedback_cloudpoodll/correctionsmarkup'],\n    function ($, log, str, Ajax, notification, ModalFactory, ModalEvents,correctionsmarkup) {\n    \"use strict\"; // jshint ;_;\n    /*\n    This file does small report\n     */\n\n    log.debug('Grammar suggestions: initialising');\n\n    return {\n        //controls\n        controls: {},\n        checking: '... checking ...',\n        nosuggestions: 'No suggestions',\n        overwrite: 'OVERWRITE',\n        overwritesuggestions: 'Overwrite the existing grammar suggestions?',\n        overwritewarning: 'WARNING: Overwrite',\n\n        //init the module\n        init: function(){\n            this.init_strings();\n            this.register_controls();\n            this.register_events();\n        },\n\n        init_strings: function(){\n          var that =this;\n          str.get_string('checking','assignfeedback_cloudpoodll').done(function(s){that.checking=s;});\n          str.get_string('nosuggestions','assignfeedback_cloudpoodll').done(function(s){that.nosuggestions=s;});\n          str.get_string('overwrite','assignfeedback_cloudpoodll').done(function(s){that.overwrite=s;});\n          str.get_string('overwritesuggestions','assignfeedback_cloudpoodll').done(function(s){that.overwritesuggestions=s;});\n          str.get_string('overwritewarning','assignfeedback_cloudpoodll').done(function(s){that.overwritewarning=s;});\n        },\n\n        //load all the controls so we do not have to do it later\n        register_controls: function(){\n            this.controls.checkgrammarbutton = $('.grammarsuggestionstrigger');\n        },\n\n        //attach the various event handlers we need\n        register_events: function() {\n            var that = this;\n\n            that.controls.checkgrammarbutton.click(function(e){\n\n                //collect source and target from data-src and data-target\n                var srcselector = $(this).data('src');\n                var targetselector  = $(this).data('target');\n                var differenceselector  = $(this).data('difference');\n                var language = $(this).data('language');\n\n                //if we already have grammar suggestions, we need to ask if we should overwrite\n                if(that.get_value($(targetselector)).length>0) {\n                    ModalFactory.create({\n                        type: ModalFactory.types.SAVE_CANCEL,\n                        title: that.overwritewarning,\n                        body: that.overwritesuggestions,\n                    })\n                        .then(function (themodal) {\n                            themodal.setSaveButtonText(that.overwrite);\n                            var root = themodal.getRoot();\n                            root.on(ModalEvents.save,\n                                function (e) {\n                                    that.check_grammar(that, srcselector, targetselector, differenceselector, language);\n                                }\n                            );\n                            themodal.show();\n                            return themodal;\n                        });\n                }else {\n                    //if not we just fetch grammar suggestions\n                    that.check_grammar(that,srcselector ,targetselector,differenceselector ,language);\n                }\n                return false;\n            });\n\n        },//end of register events\n\n        //to make this useful in case of a div/span/textarea ..\n        set_value: function(element, value, type){\n            if(element.is('textarea')){\n                $(element).val(value);\n            }else{\n                switch(type){\n                    case 'html':\n                        $(element).html(value);\n                        break;\n\n                    case 'text':\n                    default:\n                        $(element).text(value);\n                        break;\n                }\n            }\n        },\n\n        get_value: function(element){\n            if(element.is('textarea')){\n                return $(element).val();\n            }else{\n               return $(element).text();\n            }\n        },\n\n        check_grammar: function (that,srcselector,targetselector,differenceselector, language) {\n            var src_element = $(srcselector);\n            var target_element = $(targetselector);\n            var difference_element = $(differenceselector);\n\n            //do the check\n            var text = that.get_value(src_element);\n            //but quit if its empty\n            if(!text || text==='' || text.trim()===''){\n                return;\n            }\n            that.set_value(target_element,that.checking, 'text');\n            Ajax.call([{\n                methodname: 'assignfeedback_cloudpoodll_check_grammar',\n                args: {\n                    text: text,\n                    language: language\n                },\n                done: function (ajaxresult) {\n\n                    var payloadobject = JSON.parse(ajaxresult);\n                    if (payloadobject) {\n                        if(payloadobject.grammarerrors.length<3){\n                            //hacky but fast way to flag no errors\n                            that.set_value(target_element,that.nosuggestions, 'text');\n                        }else{\n                            that.set_value(target_element,payloadobject.suggestions, 'text');\n                            //use this for html marked up suggestions (word numbers and spaces etc)\n                            that.set_value(difference_element,payloadobject.markedupsuggestions, 'html');\n\n                            var opts = [];\n                            opts['sessionerrors'] = payloadobject.grammarerrors;\n                            opts['sessionmatches'] = payloadobject.grammarmatches;\n                            //markup corrections\n                            correctionsmarkup.justmarkup(differenceselector,\n                                payloadobject.grammarerrors,\n                                payloadobject.grammarmatches,\n                                payloadobject.insertioncount);\n                            //initially the preview container is hidden\n                            //HACK .. to do un-hardcode this\n                            $('.asf_cp_correctionspreview_cont').show();\n\n                        }\n\n                    }else{\n                        //something went wrong, user does not really need to know details\n                        //that.set_value(target_element,that.nosuggestions, 'text');\n                        notification.alert(that.nosuggestions);\n                        log.debug('result not fetched');\n                    }\n\n                },\n                fail: notification.exception\n            }]);\n        },\n\n    };//end of return value\n});"],"names":["define","$","log","str","Ajax","notification","ModalFactory","ModalEvents","correctionsmarkup","debug","controls","checking","nosuggestions","overwrite","overwritesuggestions","overwritewarning","init","init_strings","register_controls","register_events","that","this","get_string","done","s","checkgrammarbutton","click","e","srcselector","data","targetselector","differenceselector","language","get_value","length","create","type","types","SAVE_CANCEL","title","body","then","themodal","setSaveButtonText","getRoot","on","save","check_grammar","show","set_value","element","value","is","val","html","text","src_element","target_element","difference_element","trim","call","methodname","args","ajaxresult","payloadobject","JSON","parse","grammarerrors","suggestions","markedupsuggestions","opts","grammarmatches","justmarkup","insertioncount","alert","fail","exception"],"mappings":"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"}