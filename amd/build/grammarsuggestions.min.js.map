{"version":3,"file":"grammarsuggestions.min.js","sources":["../src/grammarsuggestions.js"],"sourcesContent":["define(['jquery', 'core/log','core/str','core/ajax','core/notification','assignfeedback_cloudpoodll/correctionsmarkup'],\n    function ($, log, str, Ajax, notification,correctionsmarkup) {\n    \"use strict\"; // jshint ;_;\n    /*\n    This file does small report\n     */\n\n    log.debug('Grammar suggestions: initialising');\n\n    return {\n        //controls\n        controls: {},\n        ready: false,\n        checking: '... checking ...',\n        nosuggestions: 'No suggestions',\n\n        //init the module\n        init: function(){\n            log.debug('Grammar suggestions: initialising');\n            this.ready=false;\n            this.init_strings();\n            this.register_controls();\n            this.register_events();\n        },\n\n        init_strings: function(){\n          var that =this;\n          str.get_string('checking','assignfeedback_cloudpoodll').done(function(s){that.checking=s;});\n          str.get_string('nosuggestions','assignfeedback_cloudpoodll').done(function(s){that.nosuggestions=s;});\n        },\n\n        //load all the controls so we do not have to do it later\n        register_controls: function(){\n            this.controls.checkgrammarbutton = $('.grammarsuggestionstrigger');\n        },\n\n        //attach the various event handlers we need\n        register_events: function() {\n            var that = this;\n            that.controls.checkgrammarbutton.click(function(e){\n                //collect source and target from data-src and data-target\n                var srcelement = $(this).data('src');\n                var targetelement = $(this).data('target');\n                var language = $(this).data('language');\n                that.check_grammar(that,srcelement,targetelement,language);\n                return false;\n            });\n        },//end of register events\n\n        check_grammar: function (that,srcelement,targetelement,language) {\n\n            //do the check\n            var text = $(srcelement).val();\n            //but quit if its empty\n            if(!text || text==='' || text.trim()===''){\n                return;\n            }\n            $(targetelement).text(that.checking);\n            Ajax.call([{\n                methodname: 'assignfeedback_cloudpoodll_check_grammar',\n                args: {\n                    text: text,\n                    language: language\n                },\n                done: function (ajaxresult) {\n\n                    var payloadobject = JSON.parse(ajaxresult);\n                    if (payloadobject) {\n                        if(payloadobject.grammarerrors.length<3){\n                            //hacky but fast way to flag no errors\n                            $(targetelement).text(that.nosuggestions);\n                        }else{\n                            $(targetelement).html(payloadobject.suggestions);\n                            var opts = [];\n                            opts['sessionerrors'] = payloadobject.grammarerrors;\n                            opts['sessionmatches'] = payloadobject.grammarmatches;\n                            correctionsmarkup.init(opts);\n                        }\n\n                    }else{\n                        //something went wrong, user does not really need to know details\n                        $(targetelement).text(that.nosuggestions);\n                        log.debug('result not fetched');\n                    }\n\n                },\n                fail: notification.exception\n            }]);\n        },\n\n    };//end of return value\n});"],"names":["define","$","log","str","Ajax","notification","correctionsmarkup","debug","controls","ready","checking","nosuggestions","init","init_strings","register_controls","register_events","that","this","get_string","done","s","checkgrammarbutton","click","e","srcelement","data","targetelement","language","check_grammar","text","val","trim","call","methodname","args","ajaxresult","payloadobject","JSON","parse","grammarerrors","length","html","suggestions","opts","grammarmatches","fail","exception"],"mappings":"AAAAA,uDAAO,CAAC,SAAU,WAAW,WAAW,YAAY,oBAAoB,iDACpE,SAAUC,EAAGC,IAAKC,IAAKC,KAAMC,aAAaC,0BAM1CJ,IAAIK,MAAM,qCAEH,CAEHC,SAAU,GACVC,OAAO,EACPC,SAAU,mBACVC,cAAe,iBAGfC,KAAM,WACFV,IAAIK,MAAM,0CACLE,OAAM,OACNI,oBACAC,yBACAC,mBAGTF,aAAc,eACRG,KAAMC,KACVd,IAAIe,WAAW,WAAW,8BAA8BC,MAAK,SAASC,GAAGJ,KAAKN,SAASU,KACvFjB,IAAIe,WAAW,gBAAgB,8BAA8BC,MAAK,SAASC,GAAGJ,KAAKL,cAAcS,MAInGN,kBAAmB,gBACVN,SAASa,mBAAqBpB,EAAE,+BAIzCc,gBAAiB,eACTC,KAAOC,KACXD,KAAKR,SAASa,mBAAmBC,OAAM,SAASC,OAExCC,WAAavB,EAAEgB,MAAMQ,KAAK,OAC1BC,cAAgBzB,EAAEgB,MAAMQ,KAAK,UAC7BE,SAAW1B,EAAEgB,MAAMQ,KAAK,mBAC5BT,KAAKY,cAAcZ,KAAKQ,WAAWE,cAAcC,WAC1C,MAIfC,cAAe,SAAUZ,KAAKQ,WAAWE,cAAcC,cAG/CE,KAAO5B,EAAEuB,YAAYM,MAErBD,MAAe,KAAPA,MAA2B,KAAdA,KAAKE,SAG9B9B,EAAEyB,eAAeG,KAAKb,KAAKN,UAC3BN,KAAK4B,KAAK,CAAC,CACPC,WAAY,2CACZC,KAAM,CACFL,KAAMA,KACNF,SAAUA,UAEdR,KAAM,SAAUgB,gBAERC,cAAgBC,KAAKC,MAAMH,eAC3BC,iBACGA,cAAcG,cAAcC,OAAO,EAElCvC,EAAEyB,eAAeG,KAAKb,KAAKL,mBAC1B,CACDV,EAAEyB,eAAee,KAAKL,cAAcM,iBAChCC,KAAO,GACXA,KAAI,cAAoBP,cAAcG,cACtCI,KAAI,eAAqBP,cAAcQ,eACvCtC,kBAAkBM,KAAK+B,WAK3B1C,EAAEyB,eAAeG,KAAKb,KAAKL,eAC3BT,IAAIK,MAAM,uBAIlBsC,KAAMxC,aAAayC"}